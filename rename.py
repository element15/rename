#!/usr/local/bin/python3

help_string = """\
rename.py
Version dev
Written by Christian Moomaw

USAGE

    rename.py [-n] <search_pattern> <replace_pattern> <file_1> [file_2] ...

    -n  (Also, `--dry-run`) Perform a dry run; print the rename operations
        which would have been performed, but don't actually rename
        anything

DESCRIPTION

Rename the files described according to Python regex patterns
`search_pattern` and `replace_pattern`. Replacement grammar comes from the
Python 3 `re.sub()` function.

LICENSE

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
"""

from os import rename
from sys import argv
from warnings import warn
import re

# Two digit years which are strictly less than this value will be interpreted
# as being a part of the 2000s. All other years will be considered part of the
# 1900s. This value may be overriden by the user using a command argument
DEFAULT_CENTURY_ROLLOVER = 30

def get_params():
	# Parses the arguments in sys.argv. Returns a `dict` with the following
	# fields:
	# {
	# 	"dry_run": boolean indicating whether to execute a dry run
	#   "search_pattern": regex input pattern
	# 	"replace_pattern": regex pattern used to rename each file
	# 	"file_list": list containing all specified file strings
	# }
	#
	# NOTE: This function does not validate any command syntax.

	out = {}
	arg_shift = 0 # If `-n` is present, all other args will be shifted by 1

	if len(argv) < 4: # Filename, search_pattern, replace_pattern, file_1
		return out

	if argv[1].lower() in ('-n', '--dry-run'):
		if len(argv) < 5: # Need one more argument
			return out
		out['dry_run'] = True
		arg_shift = 1
	else:
		out['dry_run'] = False

	out['search_pattern'] = argv[1 + arg_shift]
	out['replace_pattern'] = argv[2 + arg_shift]
	out['file_list'] = argv[(3 + arg_shift):]

	return out

def date_pattern(mode):
	# Given a string describing an existing date format, generate a regex
	# pattern to extract a date matching said format from a string.

	# A valid mode is composed of one each from the month, day, and year
	# categories below. The examples given to the right are 1 April 2004.
	mode_key = {
		# NOTE: The presence of a three-digit year in a filename results in
		# undefined behavior.
		'y': 	r'(?P<y>\d{2,4})', 	# 04, 2004 (and 004; see note above)
		'yy': 	r'(?P<y>\d{2})', 	# 04
		'yyyy': r'(?P<y>\d{4})', 	# 2004
		'm': 	r'(?P<m>\d{1,2})', 	# 4, 04
		'mm': 	r'(?P<m>\d{2})', 	# 04
		'mmm': 	r'(?P<m>\w+)', 		# Apr, April, aprile
		'd': 	r'(?P<d>\d{1,2})', 	# 1, 01
		'dd': 	r'(?P<d>\d{2})', 	# 01
	}

	# Parse the mode spec by separating it into it's three components
	mode_pattern = re.compile(r'(?P<a>(?P<x>[mdy])(?P=x)*)\W?'
		r'(?P<b>(?P<y>[mdy])(?P=y)*)\W?(?P<c>(?P<z>[mdy])(?P=z)*)')
	mode_match = mode_pattern.match(mode)

	# Ensure that the specified mode contains exactly one each of day, month,
	# and year. (For example, 'ddmmdd' is not a valid mode.)
	mode_parts = (mode_match.group('a')[:1], mode_match.group('b')[:1],
		mode_match.group('c')[:1])
	mode_parts = set(mode_parts) # Remove duplicates
	if len(mode_parts) != 3:
		raise ValueError('Invalid date pattern: ' + mode)

	# Build the date regex pattern from the appropriate `mode_key` entries
	date_pattern = re.compile(r'(?P<prefix>.*)' +
		mode_key[mode_match.group('a')] + r'[.\- ]?' +
		mode_key[mode_match.group('b')] + r'[.\- ]?' +
		mode_key[mode_match.group('c')] + r'(?P<suffix>.*)'
	)
	return date_pattern

def reformat_date(str, pattern, rollover=DEFAULT_CENTURY_ROLLOVER):
	# Given arbitrary string `str` and regex pattern `pattern` generated by
	# `date_pattern()`, find and reformat a date in `str` to be of the form
	# 'yyyy-mm-dd' (see ISO 8601). The `rollover` value determines how
	# two-digit years are converted to four-digit years

	month_key = { # Alphabetic months must be all lowercase
		'01': ('01', '1', 'jan', 'january', 'gen', 'gennaio'),
		'02': ('02', '2', 'feb', 'february', 'febbraio'),
		'03': ('03', '3', 'mar', 'march', 'marzo'),
		'04': ('04', '4', 'apr', 'april', 'aprile'),
		'05': ('05', '5', 'may', 'mag', 'maggio'),
		'06': ('06', '6', 'jun', 'june', 'giu', 'giunio'),
		'07': ('07', '7', 'jul', 'july', 'lug', 'luglio'),
		'08': ('08', '8', 'aug', 'august', 'ago', 'agosto'),
		'09': ('09', '9', 'sep', 'sept', 'september', 'set', 'sett',
			'settembre'),
		'10': ('10', 'oct', 'october', 'ott', 'ottobre'),
		'11': ('11', 'nov', 'november', 'novembre'),
		'12': ('12', 'dec', 'december', 'dic', 'dicembre')
	}

	m = pattern.match(str)
	if not m:
		warn('No date match found in string: ' + str)
		return str
	year = m.group('y')
	month = m.group('m')
	day = m.group('d')

	# Prepend '19' or '20' to the year if necessary
	if len(year) == 2:
		century = '20' if int(year) < rollover else '19'
		year = century + year
	# Normalize the month according to `month_key`
	month = month.lower()
	found_month_match = False
	for key in month_key:
		if month in month_key[key]:
			month = key
			found_month_match = True
			break
	if not found_month_match:
		raise ValueError('Unable to normalize month string: ' + month)
	# Left-pad the day with a zero if necessary
	if len(day) == 1:
		day = '0' + day

	# Generate new string with normalized date
	reformatted_str = (m.group('prefix') + year + '-' + month + '-' + day +
		m.group('suffix'))
	return reformatted_str

def main():
	params = get_params()
	if not params:
		print(help_string)
		return

	# Generate rename pairs
	p = re.compile(params['search_pattern'])
	rename_pairs = [(f, re.sub(p, params['replace_pattern'], f)) \
			for f in params['file_list']] # List of (before, after) tuples
	# Remove trivial renames
	rename_pairs = [i for i in rename_pairs if i[0] != i[1]]

	if params['dry_run']:
		for i in rename_pairs:
			print(i[0] + ' ==> ' + i[1])
	else:
		for i in rename_pairs:
			print(i[0] + ' ==> ' + i[1])
			rename(i[0], i[1])



main()
